@page "/register"
@layout LoginLayout

<h1 class="h2 font-weight-normal login-title">
    SFMBE
</h1>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="registerParameters">
    <DataAnnotationsValidator />
    <h4 class="font-weight-normal text-center">Create Account</h4>

    <label for="inputUsername" class="sr-only">Email</label>
    <InputText id="inputUsername" class="form-control" placeholder="Email" autofocus @bind-Value="@registerParameters.Email" />
    <ValidationMessage For="@(() => registerParameters.Email)" />

    <label for="inputPassword" class="sr-only">Password</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="@registerParameters.Password" />
    <ValidationMessage For="@(() => registerParameters.Password)" />

    <label for="inputPasswordConfirm" class="sr-only">Password Confirmation</label>
    <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="Password Confirmation" @bind-Value="@registerParameters.PasswordConfirm" />
    <ValidationMessage For="@(() => registerParameters.PasswordConfirm)" />

    <button class="btn btn-lg btn-primary btn-block" type="submit">Create account</button>

    <label class="text-danger">@error</label>
    <NavLink href="login">
        <h6 class="font-weight-normal text-center">Already have an account? Click here to login</h6>
    </NavLink>
</EditForm>

@code{

  RegisterParametersCommand registerParameters { get; set; } = new RegisterParametersCommand();
  string error { get; set; }

  async Task OnSubmit()
  {
      error = null;
      try
      {
          var response = await this.AuthService.Register(this.registerParameters);

          if (response.IsOk)
          {
              this.NavigationManager.NavigateTo("/login");
          }
      }
      catch (Exception ex)
      {
          error = ex.Message;
      }
  }
}