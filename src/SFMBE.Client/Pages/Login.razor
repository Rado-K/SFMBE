@page "/login"
@layout LoginLayout

<h1 class="h2 font-weight-normal login-title">
    SFMBE
</h1>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginParameters">
    <DataAnnotationsValidator />

    <h4 class="font-weight-normal text-center">Login</h4>

    <label for="inputUsername" class="sr-only">Email</label>
    <InputText id="inputUsername" class="form-control" @bind-Value="loginParameters.Email" placeholder="Email" />
    <ValidationMessage For="@(() => loginParameters.Email)" />

    <label for="inputPassword" class="sr-only">Password</label>
    <InputPassword class="form-control" @bind-Value="this.loginParameters.Password" />
    <ValidationMessage For="@(() => loginParameters.Password)" />

    <div class="form-check m-3">
        <InputCheckbox id="inputRememberMe" class="form-check-input" @bind-Value="@loginParameters.RememberMe" />
        <label class="form-check-label" for="inputRememberMe">Remember Me</label>
    </div>

    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>

    <label class="text-danger">@error</label>

    <NavLink href="register">
        <h6 class="font-weight-normal text-center">Create account</h6>
    </NavLink>
</EditForm>

@code{
  LoginParametersCommand loginParameters { get; set; } = new LoginParametersCommand();
  string error { get; set; }

  async Task OnSubmit()
  {
      error = null;
      var response = await this.AuthService.Login(this.loginParameters);
      if (response.IsOk)
      {
          this.State.UserToken = response.Data.token;
          await JsRuntime.SaveToken(this.State.UserToken);
          this.State.Username = this.loginParameters.Email;
          this.NavigationManager.NavigateTo("/");
      }
      else
      {
          this.StateHasChanged();
      }
  }
}